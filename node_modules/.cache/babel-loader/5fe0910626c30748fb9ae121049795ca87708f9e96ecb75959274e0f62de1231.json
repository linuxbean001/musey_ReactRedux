{"ast":null,"code":"var _s = $RefreshSig$();\n// StripeCheckoutButton.js\nimport React, { useEffect } from \"react\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst StripeCheckout = _ref => {\n  _s();\n  let {\n    userId\n  } = _ref;\n  // const navigate = useNavigate();\n  console.log(\"userId\", userId);\n  useEffect(() => {\n    const fetchData = async () => {\n      try {\n        const response = await fetch(`/create-checkout-session?userid=${encodeURIComponent(userId)}`);\n        // const data = await response.json();\n        console.log(\"data\", response);\n        // redirectToStripeCheckout(data.sessionId);\n      } catch (error) {\n        console.error(\"Error fetching data:\", error);\n      }\n    };\n\n    // const redirectToStripeCheckout = (sessionId) => {\n    //   const stripeScript = document.createElement(\"script\");\n    //   stripeScript.src = \"https://js.stripe.com/v3/\";\n    //   stripeScript.async = true;\n\n    //   stripeScript.addEventListener(\"load\", () => {\n    //     const stripe = window.Stripe(publicKey);\n    //     stripe\n    //       .redirectToCheckout({ sessionId })\n    //       .then((result) => {\n    //         // Handle any errors during the redirection if needed\n    //         console.log(\"Redirect result:\", result);\n\n    //         // Check if the payment was successful and redirect to the success page\n    //         if (result.error) {\n    //           console.error(\"Payment error:\", result.error.message);\n    //         } else if (\n    //           result.payment_intent &&\n    //           result.payment_intent.status === \"succeeded\"\n    //         ) {\n    //           history.push(\"/success\");\n    //         }\n    //       })\n    //       .catch((error) => {\n    //         console.error(\"Error redirecting to Stripe Checkout:\", error);\n    //       });\n    //   });\n\n    //   document.body.appendChild(stripeScript);\n    // };\n\n    fetchData();\n  }, [publicKey, userId]);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {}, void 0, false); // You can return null or an empty fragment since this component doesn't render anything\n};\n_s(StripeCheckout, \"OD7bBpZva5O2jO+Puf00hKivP7c=\");\n_c = StripeCheckout;\nexport default StripeCheckout;\nvar _c;\n$RefreshReg$(_c, \"StripeCheckout\");","map":{"version":3,"names":["React","useEffect","Fragment","_Fragment","jsxDEV","_jsxDEV","StripeCheckout","_ref","_s","userId","console","log","fetchData","response","fetch","encodeURIComponent","error","publicKey","_c","$RefreshReg$"],"sources":["D:/Prashant/ReduxProject(PS)/AI Generation Context API/musey_ReactRedux/src/StripeCheckout.js"],"sourcesContent":["// StripeCheckoutButton.js\r\nimport React, { useEffect } from \"react\";\r\n\r\nconst StripeCheckout = ({ userId }) => {\r\n  // const navigate = useNavigate();\r\nconsole.log(\"userId\", userId);\r\n\r\n\r\n  useEffect(() => {\r\n    const fetchData = async () => {\r\n      try {\r\n        const response = await fetch(\r\n          `/create-checkout-session?userid=${encodeURIComponent(userId)}`\r\n        );\r\n        // const data = await response.json();\r\n        console.log(\"data\", response);\r\n        // redirectToStripeCheckout(data.sessionId);\r\n      } catch (error) {\r\n        console.error(\"Error fetching data:\", error);\r\n      }\r\n    };\r\n\r\n    // const redirectToStripeCheckout = (sessionId) => {\r\n    //   const stripeScript = document.createElement(\"script\");\r\n    //   stripeScript.src = \"https://js.stripe.com/v3/\";\r\n    //   stripeScript.async = true;\r\n\r\n    //   stripeScript.addEventListener(\"load\", () => {\r\n    //     const stripe = window.Stripe(publicKey);\r\n    //     stripe\r\n    //       .redirectToCheckout({ sessionId })\r\n    //       .then((result) => {\r\n    //         // Handle any errors during the redirection if needed\r\n    //         console.log(\"Redirect result:\", result);\r\n\r\n    //         // Check if the payment was successful and redirect to the success page\r\n    //         if (result.error) {\r\n    //           console.error(\"Payment error:\", result.error.message);\r\n    //         } else if (\r\n    //           result.payment_intent &&\r\n    //           result.payment_intent.status === \"succeeded\"\r\n    //         ) {\r\n    //           history.push(\"/success\");\r\n    //         }\r\n    //       })\r\n    //       .catch((error) => {\r\n    //         console.error(\"Error redirecting to Stripe Checkout:\", error);\r\n    //       });\r\n    //   });\r\n\r\n    //   document.body.appendChild(stripeScript);\r\n    // };\r\n\r\n    fetchData();\r\n  }, [publicKey, userId]);\r\n\r\n  return <></>; // You can return null or an empty fragment since this component doesn't render anything\r\n};\r\n\r\nexport default StripeCheckout;\r\n"],"mappings":";AAAA;AACA,OAAOA,KAAK,IAAIC,SAAS,QAAQ,OAAO;AAAC,SAAAC,QAAA,IAAAC,SAAA;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAEzC,MAAMC,cAAc,GAAGC,IAAA,IAAgB;EAAAC,EAAA;EAAA,IAAf;IAAEC;EAAO,CAAC,GAAAF,IAAA;EAChC;EACFG,OAAO,CAACC,GAAG,CAAC,QAAQ,EAAEF,MAAM,CAAC;EAG3BR,SAAS,CAAC,MAAM;IACd,MAAMW,SAAS,GAAG,MAAAA,CAAA,KAAY;MAC5B,IAAI;QACF,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CACzB,mCAAkCC,kBAAkB,CAACN,MAAM,CAAE,EAChE,CAAC;QACD;QACAC,OAAO,CAACC,GAAG,CAAC,MAAM,EAAEE,QAAQ,CAAC;QAC7B;MACF,CAAC,CAAC,OAAOG,KAAK,EAAE;QACdN,OAAO,CAACM,KAAK,CAAC,sBAAsB,EAAEA,KAAK,CAAC;MAC9C;IACF,CAAC;;IAED;IACA;IACA;IACA;;IAEA;IACA;IACA;IACA;IACA;IACA;IACA;;IAEA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;;IAEA;IACA;;IAEAJ,SAAS,CAAC,CAAC;EACb,CAAC,EAAE,CAACK,SAAS,EAAER,MAAM,CAAC,CAAC;EAEvB,oBAAOJ,OAAA,CAAAF,SAAA,mBAAI,CAAC,CAAC,CAAC;AAChB,CAAC;AAACK,EAAA,CAtDIF,cAAc;AAAAY,EAAA,GAAdZ,cAAc;AAwDpB,eAAeA,cAAc;AAAC,IAAAY,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}